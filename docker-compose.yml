version: "3.8"

services:
  api:
    build:
      context: .
      dockerfile: ./docker/local/django/DockerFile
    command: /start
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    expose:
      - 8000
    env_file:
      - .env
    depends_on:
      - postgres-db
      - redis
    networks:
      - rentit-react

  rentit-client:
    build:
      context: ./rentit-client
      dockerfile: DockerFile.dev
    restart: on-failure
    volumes:
      - ./rentit-client:/app
      - /app/node_modules
    networks:
      - rentit-react

  postgres-db:
    image: postgres:15.5-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      -  POSTGRES_USER=${POSTGRES_USER}
      -  POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - rentit-react

  redis:
    image: redis:7.2.3-alpine
    networks:
      - rentit-react

  celery_worker:
    build:
      context: .
      dockerfile: ./docker/local/django/DockerFile
    command: /start-celeryworker
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - redis
      - postgres-db
    networks:
      - rentit-react

  flower:
    build:
      context: .
      dockerfile: ./docker/local/django/DockerFile
    command: /start-flower
    volumes:
      - .:/app
    env_file:
      - .env
    ports:
      - "5557:5555"
    depends_on:
      - redis
      - postgres-db
    networks:
      - rentit-react

  nginx:
    restart: always
    depends_on:
      - api
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/medialiles
    build:
      context: ./docker/local/nginx
      dockerfile: DockerFile
    ports:
      - "8080:80"
    networks:
      - rentit-react

networks:
  rentit-react:
    driver: bridge

volumes:
  postgres_data:
  static_volume:
  media_volume:
